package com.redhat.ceylon.compiler.java.test.structure.constructor;

class SequencedParameterCtor implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty $name$) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                this($name$, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty PossiblyEmpty = null;
    
    private static final class PossiblyEmpty {
        
        private PossiblyEmpty() {
        }
    }
    
    private SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty $name$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s$param$) {
    }
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty NonEmpty = null;
    
    private static final class NonEmpty {
        
        private NonEmpty() {
        }
    }
    
    private SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty $name$, final .ceylon.language.Sequence<? extends .ceylon.language.String> s$param$) {
    }
    
    private final void use$priv$() {
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty);
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("")}));
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty);
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("")}));
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("")}));
        new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty, (.ceylon.language.Sequence).com.redhat.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.empty_.get_(), new .java.lang.Object[]{.ceylon.language.String.instance("")}));
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> arg$1$0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, arg$1$0);
        );
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> arg$2$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")});
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, arg$2$0);
        );
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> arg$3$0 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, arg$3$0);
        );
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> arg$4$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")});
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.PossiblyEmpty, arg$4$0);
        );
        (
            let
            {
                .ceylon.language.Sequence<? extends .ceylon.language.String> arg$5$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")});
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty, arg$5$0);
        );
        (
            let
            {
                .ceylon.language.Sequence<? extends .ceylon.language.String> arg$6$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("")});
            }
            returning new .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.NonEmpty, arg$6$0);
        );
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.SequencedParameterCtor.class);
}