package com.redhat.ceylon.compiler.java.test.expression.destructuring;

final class tupleVar_ {
    
    private tupleVar_() {
    }
    
    static void tupleVar(final .ceylon.language.Sequence tuple) {
        final .ceylon.language.Sequence $pattern$tuple$0 = tuple;
        final long i1 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$0).getFromFirst(0)).longValue();
        final double f1 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$0).getFromFirst(1)).doubleValue();
        final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$0).getFromFirst(2)).toString();
        final .ceylon.language.Sequence $pattern$tuple$1 = tuple;
        final long i2 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$1).getFromFirst(0)).longValue();
        final double f2 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$1).getFromFirst(1)).doubleValue();
        final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$1).getFromFirst(2)).toString();
        final .ceylon.language.Sequence $pattern$tuple$2 = tuple;
        final long i3 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$2).getFromFirst(0)).longValue();
        final double f3 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$2).getFromFirst(1)).doubleValue();
        final .java.lang.String s3 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$2).getFromFirst(2)).toString();
    }
}
final class tupleLiteral_ {
    
    private tupleLiteral_() {
    }
    
    static void tupleLiteral() {
        final .ceylon.language.Sequence $pattern$tuple$3 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Float.instance(1.0),
                .ceylon.language.String.instance("foo")});
        final long i1 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$3).getFromFirst(0)).longValue();
        final double f1 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$3).getFromFirst(1)).doubleValue();
        final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$3).getFromFirst(2)).toString();
        final .ceylon.language.Sequence $pattern$tuple$4 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Float.instance(1.0),
                .ceylon.language.String.instance("foo")});
        final long i2 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$4).getFromFirst(0)).longValue();
        final double f2 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$4).getFromFirst(1)).doubleValue();
        final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$4).getFromFirst(2)).toString();
        final .ceylon.language.Sequence $pattern$tuple$5 = (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Float.instance(1.0),
                .ceylon.language.String.instance("foo")});
        final long i3 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$5).getFromFirst(0)).longValue();
        final double f3 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$5).getFromFirst(1)).doubleValue();
        final .java.lang.String s3 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$5).getFromFirst(2)).toString();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleLiteral_.tupleLiteral();
    }
}
final class tupleGeneric_ {
    
    private tupleGeneric_() {
    }
    
    static void tupleGeneric() {
        
        class Foo<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Foo(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                this.$reified$T = $reified$T;
            }
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Foo.class, $reified$T));
            }
        }
        
        class FooSub<T> extends Foo<T> {
            
            FooSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                super($reified$T);
                this.$reified$T = $reified$T;
            }
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, $reified$T));
            }
        }
        final .ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>> $pattern$tuple$6 = (.ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), new .java.lang.Object[]{new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$)});
        final FooSub<.ceylon.language.Integer> f1 = (FooSub<.ceylon.language.Integer>)(FooSub)((.ceylon.language.Sequence)$pattern$tuple$6).getFromFirst(0);
        final .ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>> $pattern$tuple$7 = (.ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), new .java.lang.Object[]{new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$)});
        final FooSub<.ceylon.language.Integer> f2 = (FooSub<.ceylon.language.Integer>)(FooSub)((.ceylon.language.Sequence)$pattern$tuple$7).getFromFirst(0);
        final .ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>> $pattern$tuple$8 = (.ceylon.language.Sequence<? extends FooSub<.ceylon.language.Integer>>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), new .java.lang.Object[]{new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$)});
        final Foo<.ceylon.language.Integer> f3 = (Foo<.ceylon.language.Integer>)(Foo)((.ceylon.language.Sequence)$pattern$tuple$8).getFromFirst(0);
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.destructuring.tupleGeneric_.tupleGeneric();
    }
}
final class entryVar_ {
    
    private entryVar_() {
    }
    
    static void entryVar(final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> entry) {
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$9 = entry;
        final long i1 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$9).getKey()).longValue();
        final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$9).getItem()).toString();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$10 = entry;
        final long i2 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$10).getKey()).longValue();
        final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$10).getItem()).toString();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$11 = entry;
        final long i3 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$11).getKey()).longValue();
        final .java.lang.String s3 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$11).getItem()).toString();
    }
}
final class entryLiteral_ {
    
    private entryLiteral_() {
    }
    
    static void entryLiteral() {
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$12 = new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("foo"));
        final long i1 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$12).getKey()).longValue();
        final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$12).getItem()).toString();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$13 = new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("foo"));
        final long i2 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$13).getKey()).longValue();
        final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$13).getItem()).toString();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String> $pattern$entry$14 = new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.String.instance("foo"));
        final long i3 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$14).getKey()).longValue();
        final .java.lang.String s3 = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$14).getItem()).toString();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.destructuring.entryLiteral_.entryLiteral();
    }
}
final class entryGeneric_ {
    
    private entryGeneric_() {
    }
    
    static void entryGeneric() {
        
        class Foo<T> implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
            
            Foo(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                this.$reified$T = $reified$T;
            }
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(Foo.class, $reified$T));
            }
        }
        
        class FooSub<T> extends Foo<T> {
            
            FooSub(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
                super($reified$T);
                this.$reified$T = $reified$T;
            }
            private final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
            
            @.java.lang.Override
            public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, $reified$T));
            }
        }
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends FooSub<.ceylon.language.Integer>> $pattern$entry$15 = new .ceylon.language.Entry<.ceylon.language.Integer, FooSub<.ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), .ceylon.language.Integer.instance(0L), new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$));
        final long i1 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$15).getKey()).longValue();
        final FooSub<.ceylon.language.Integer> f1 = (FooSub<.ceylon.language.Integer>)(FooSub)((.ceylon.language.Entry)$pattern$entry$15).getItem();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends FooSub<.ceylon.language.Integer>> $pattern$entry$16 = new .ceylon.language.Entry<.ceylon.language.Integer, FooSub<.ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), .ceylon.language.Integer.instance(0L), new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$));
        final long i2 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$16).getKey()).longValue();
        final FooSub<.ceylon.language.Integer> f2 = (FooSub<.ceylon.language.Integer>)(FooSub)((.ceylon.language.Entry)$pattern$entry$16).getItem();
        final .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends FooSub<.ceylon.language.Integer>> $pattern$entry$17 = new .ceylon.language.Entry<.ceylon.language.Integer, FooSub<.ceylon.language.Integer>>(.ceylon.language.Integer.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.functionOrValue(.com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(FooSub.class, .ceylon.language.Integer.$TypeDescriptor$)), .ceylon.language.Integer.instance(0L), new FooSub<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$));
        final long i3 = ((.ceylon.language.Integer)((.ceylon.language.Entry)$pattern$entry$17).getKey()).longValue();
        final Foo<.ceylon.language.Integer> f3 = (Foo<.ceylon.language.Integer>)(Foo)((.ceylon.language.Entry)$pattern$entry$17).getItem();
    }
    
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.expression.destructuring.entryGeneric_.entryGeneric();
    }
}
final class destructuringLet_ {
    
    private destructuringLet_() {
    }
    
    static void destructuringLet(final .ceylon.language.Sequence tuple, final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .java.lang.Object> entry) {
        final double x1 = (
            let
            {
                final .ceylon.language.Sequence $pattern$tuple$18 = tuple;
                final .java.lang.String s = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$18).getFromFirst(0)).toString();
                final double f = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$18).getFromFirst(1)).doubleValue();
                final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$18).getFromFirst(2)).longValue();
            }
            returning .ceylon.language.String.getSize(s) + f * i;
        );
        final double y2 = (
            let
            {
                final .ceylon.language.Sequence $pattern$tuple$19 = tuple;
                final .java.lang.String s = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$19).getFromFirst(0)).toString();
                final double f = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$19).getFromFirst(1)).doubleValue();
                final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$19).getFromFirst(2)).longValue();
            }
            returning .ceylon.language.String.getSize(s) + f * i;
        );
        final .java.lang.String e1 = (
            let
            {
                final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .java.lang.Object> $pattern$entry$20 = entry;
                final .java.lang.String k = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$20).getKey()).toString();
                final .java.lang.Object v = ((.ceylon.language.Entry)$pattern$entry$20).getItem();
            }
            returning k + v.toString();
        );
        final .java.lang.String f2 = (
            let
            {
                final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .java.lang.Object> $pattern$entry$21 = entry;
                final .java.lang.String k = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$21).getKey()).toString();
                final .java.lang.Object v = ((.ceylon.language.Entry)$pattern$entry$21).getItem();
            }
            returning k + v.toString();
        );
    }
}
final class variadicDestructuring_ {
    
    private variadicDestructuring_() {
    }
    
    static void variadicDestructuring(final .ceylon.language.Sequence<? extends .ceylon.language.String> strings, final .ceylon.language.Sequence tup, final .ceylon.language.Sequence<? extends .ceylon.language.Float> floats) {
        final .ceylon.language.Sequence<? extends .ceylon.language.String> $pattern$tuple$22 = strings;
        final .java.lang.String x = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$22).getFromFirst(0)).toString();
        final .java.lang.String y = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$22).getFromFirst(1)).toString();
        final .ceylon.language.Sequential<? extends .ceylon.language.String> rest = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$pattern$tuple$22).skip(2).sequence();
        final .ceylon.language.Sequence $pattern$tuple$23 = tup;
        final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$23).getFromFirst(0)).longValue();
        final .ceylon.language.Sequence pair = (.ceylon.language.Sequence)((.ceylon.language.Sequence)$pattern$tuple$23).skip(1).sequence();
        final .ceylon.language.Sequence $pattern$tuple$24 = pair;
        final double ff = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$24).getFromFirst(0)).doubleValue();
        final .java.lang.String ss = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$24).getFromFirst(1)).toString();
        final .ceylon.language.Sequence<? extends .ceylon.language.Float> $pattern$tuple$25 = floats;
        final double z = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$25).getFromFirst(0)).doubleValue();
        final .ceylon.language.Sequential<? extends .ceylon.language.Float> zs = (.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$pattern$tuple$25).skip(1).sequence();
    }
}
final class destructureTupleInEntry_ {
    
    private destructureTupleInEntry_() {
    }
    
    static void destructureTupleInEntry(final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Float>> entry) {
        final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Float>> $pattern$entry$26 = (.ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Float>>)(.ceylon.language.Entry)entry;
        final .java.lang.String s = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$26).getKey()).toString();
        final double x = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Entry)$pattern$entry$26).getItem()).getFromFirst(0)).doubleValue();
        final double y = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Entry)$pattern$entry$26).getItem()).getFromFirst(1)).doubleValue();
        final double z = (
            let
            {
                final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Float>> $pattern$entry$27 = (.ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.Sequence<? extends .ceylon.language.Float>>)(.ceylon.language.Entry)entry;
                final .java.lang.String s_ = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$27).getKey()).toString();
                final double x_ = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Entry)$pattern$entry$27).getItem()).getFromFirst(0)).doubleValue();
                final double y_ = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Entry)$pattern$entry$27).getItem()).getFromFirst(1)).doubleValue();
            }
            returning x_ * y_;
        );
    }
}
final class destructureNestedTuple_ {
    
    private destructureNestedTuple_() {
    }
    
    static void destructureNestedTuple(final .ceylon.language.Sequence tuple) {
        final .ceylon.language.Sequence $pattern$tuple$28 = tuple;
        final .java.lang.String s = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$28).getFromFirst(0)).toString();
        final long i = ((.ceylon.language.Integer)((.ceylon.language.Sequence)((.ceylon.language.Sequence)$pattern$tuple$28).getFromFirst(1)).getFromFirst(0)).longValue();
        final double f = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Sequence)$pattern$tuple$28).getFromFirst(1)).getFromFirst(1)).doubleValue();
        final .java.lang.String k = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$pattern$tuple$28).getFromFirst(2)).getKey()).toString();
        final .java.lang.String v = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$pattern$tuple$28).getFromFirst(2)).getItem()).toString();
        final .java.lang.String x = (
            let
            {
                final .ceylon.language.Sequence $pattern$tuple$29 = tuple;
                final .java.lang.String s_ = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$29).getFromFirst(0)).toString();
                final long i_ = ((.ceylon.language.Integer)((.ceylon.language.Sequence)((.ceylon.language.Sequence)$pattern$tuple$29).getFromFirst(1)).getFromFirst(0)).longValue();
                final double f_ = ((.ceylon.language.Float)((.ceylon.language.Sequence)((.ceylon.language.Sequence)$pattern$tuple$29).getFromFirst(1)).getFromFirst(1)).doubleValue();
                final .java.lang.String k_ = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$pattern$tuple$29).getFromFirst(2)).getKey()).toString();
                final .java.lang.String v_ = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$pattern$tuple$29).getFromFirst(2)).getItem()).toString();
            }
            returning k_ + v_;
        );
    }
}
final class destructureInFor_ {
    
    private destructureInFor_() {
    }
    
    static void destructureInFor(final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iter) {
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iterable$31 = (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter;
        final boolean isArray$32 = iterable$31 instanceof .ceylon.language.Array;
        final boolean isTuple$33 = iterable$31 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$31).$getArray$() != null;
        .java.lang.Object elem$30 = null;
        final .java.lang.Object array$34;
        int i$35 = 0;
        final int length$36;
        if (isTuple$33) {
            array$34 = ((.ceylon.language.Tuple)iterable$31).$getArray$();
            i$35 = ((.ceylon.language.Tuple)iterable$31).$getFirst$();
            length$36 = i$35 + ((.ceylon.language.Tuple)iterable$31).$getLength$();
        } else if (isArray$32) {
            array$34 = ((.ceylon.language.Array)iterable$31).toArray();
            length$36 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$34);
        } else {
            array$34 = null;
            length$36 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> elem$30$iterator$ = isTuple$33 || isArray$32 ? null : iterable$31.iterator();
        loop_0: while (isTuple$33 || isArray$32 ? i$35 < length$36 : !((elem$30 = elem$30$iterator$.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$33 || isArray$32) elem$30 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$34, i$35++);
            final .java.lang.String x = ((.ceylon.language.String)((.ceylon.language.Sequence)elem$30).getFromFirst(0)).toString();
            final double y = ((.ceylon.language.Float)((.ceylon.language.Sequence)elem$30).getFromFirst(1)).doubleValue();
            final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)elem$30).getFromFirst(2)).getKey()).toString();
            final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)elem$30).getFromFirst(2)).getItem()).toString();
            final .java.lang.String s = x;
            final double f = y;
            final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.String> e = new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2));
        }
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iterable$38 = (.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter;
        final boolean isArray$39 = iterable$38 instanceof .ceylon.language.Array;
        final boolean isTuple$40 = iterable$38 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$38).$getArray$() != null;
        .java.lang.Object elem$37 = null;
        final .java.lang.Object array$41;
        int i$42 = 0;
        final int length$43;
        if (isTuple$40) {
            array$41 = ((.ceylon.language.Tuple)iterable$38).$getArray$();
            i$42 = ((.ceylon.language.Tuple)iterable$38).$getFirst$();
            length$43 = i$42 + ((.ceylon.language.Tuple)iterable$38).$getLength$();
        } else if (isArray$39) {
            array$41 = ((.ceylon.language.Array)iterable$38).toArray();
            length$43 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$41);
        } else {
            array$41 = null;
            length$43 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> elem$37$iterator$ = isTuple$40 || isArray$39 ? null : iterable$38.iterator();
        loop_1: while (isTuple$40 || isArray$39 ? i$42 < length$43 : !((elem$37 = elem$37$iterator$.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$40 || isArray$39) elem$37 = .com.redhat.ceylon.compiler.java.Util.getObjectArray(array$41, i$42++);
            final .java.lang.String x = ((.ceylon.language.String)((.ceylon.language.Sequence)elem$37).getFromFirst(0)).toString();
            final double y = ((.ceylon.language.Float)((.ceylon.language.Sequence)elem$37).getFromFirst(1)).doubleValue();
            final .java.lang.String s1 = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)elem$37).getFromFirst(2)).getKey()).toString();
            final .java.lang.String s2 = ((.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)elem$37).getFromFirst(2)).getItem()).toString();
            final .java.lang.String s = x;
            final double f = y;
            final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .ceylon.language.String> e = new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance(s1), .ceylon.language.String.instance(s2));
        }
    }
}
final class destructureInForComprehensions_ {
    
    private destructureInForComprehensions_() {
    }
    
    static void destructureInForComprehensions(final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iter, final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iter2) {
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> xs = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$, 1, true){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$){
                        
                        public final .ceylon.language.Iterator<.ceylon.language.Sequence<? extends .java.lang.Object>> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Sequence<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$)))){
                                {
                                    $iterator$0 = ((.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter).iterator();
                                }
                                private final .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> $iterator$0;
                                private .ceylon.language.String x;
                                private .ceylon.language.Sequential<? extends .ceylon.language.Float> y;
                                private .ceylon.language.String s1;
                                private .ceylon.language.String s2;
                                private boolean $pattern$tuple$45$exhausted$;
                                
                                private final boolean $pattern$tuple$45() {
                                    final .java.lang.Object $ceylontmp$item$44 = $iterator$0.next();
                                    $pattern$tuple$45$exhausted$ = $ceylontmp$item$44 == .ceylon.language.finished_.get_();
                                    if ($pattern$tuple$45$exhausted$) {
                                        return false;
                                    } else {
                                        x = (.ceylon.language.String)((.ceylon.language.Sequence)$ceylontmp$item$44).getFromFirst(0);
                                        y = (.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$ceylontmp$item$44).getFromFirst(1);
                                        s1 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$44).getFromFirst(2)).getKey();
                                        s2 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$44).getFromFirst(2)).getItem();
                                        return true;
                                    }
                                }
                                
                                public final .java.lang.Object next() {
                                    if (this.$pattern$tuple$45()) {
                                        final .ceylon.language.String x = this.x;
                                        final .ceylon.language.Sequential<? extends .ceylon.language.Float> y = this.y;
                                        final .ceylon.language.String s1 = this.s1;
                                        final .ceylon.language.String s2 = this.s2;
                                        return (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                                                new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2),
                                                y,
                                                x});
                                    } else return .ceylon.language.finished_.get_();
                                }
                            };
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        };
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> ys = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$, 1, true){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$){
                        
                        public final .ceylon.language.Iterator<.ceylon.language.Sequence<? extends .java.lang.Object>> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Sequence<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$)))){
                                {
                                    $iterator$0 = ((.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter).iterator();
                                }
                                private final .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> $iterator$0;
                                private .ceylon.language.String x;
                                private .ceylon.language.Sequential<? extends .ceylon.language.Float> y;
                                private .ceylon.language.String s1;
                                private .ceylon.language.String s2;
                                private boolean $pattern$tuple$47$exhausted$;
                                
                                private final boolean $pattern$tuple$47() {
                                    final .java.lang.Object $ceylontmp$item$46 = $iterator$0.next();
                                    $pattern$tuple$47$exhausted$ = $ceylontmp$item$46 == .ceylon.language.finished_.get_();
                                    if ($pattern$tuple$47$exhausted$) {
                                        return false;
                                    } else {
                                        x = (.ceylon.language.String)((.ceylon.language.Sequence)$ceylontmp$item$46).getFromFirst(0);
                                        y = (.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$ceylontmp$item$46).getFromFirst(1);
                                        s1 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$46).getFromFirst(2)).getKey();
                                        s2 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$46).getFromFirst(2)).getItem();
                                        return true;
                                    }
                                }
                                
                                public final .java.lang.Object next() {
                                    if (this.$pattern$tuple$47()) {
                                        final .ceylon.language.String x = this.x;
                                        final .ceylon.language.Sequential<? extends .ceylon.language.Float> y = this.y;
                                        final .ceylon.language.String s1 = this.s1;
                                        final .ceylon.language.String s2 = this.s2;
                                        return (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                                                new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2),
                                                y,
                                                x});
                                    } else return .ceylon.language.finished_.get_();
                                }
                            };
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        };
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> xys = new .com.redhat.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$, 1, true){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Sequence<? extends .java.lang.Object>, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .ceylon.language.Empty.$TypeDescriptor$))), .ceylon.language.Null.$TypeDescriptor$){
                        
                        public final .ceylon.language.Iterator<.ceylon.language.Sequence<? extends .java.lang.Object>> iterator() {
                            return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Sequence<? extends .java.lang.Object>>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .ceylon.language.Empty.$TypeDescriptor$)))){
                                {
                                    $iterator$0 = ((.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter).iterator();
                                }
                                private final .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> $iterator$0;
                                private .ceylon.language.String x1;
                                private .ceylon.language.Sequential<? extends .ceylon.language.Float> y1;
                                private .ceylon.language.String sk1;
                                private .ceylon.language.String sv1;
                                private boolean $pattern$tuple$49$exhausted$;
                                
                                private final boolean $pattern$tuple$49() {
                                    final .java.lang.Object $ceylontmp$item$48 = $iterator$0.next();
                                    $pattern$tuple$49$exhausted$ = $ceylontmp$item$48 == .ceylon.language.finished_.get_();
                                    if ($pattern$tuple$49$exhausted$) {
                                        return false;
                                    } else {
                                        x1 = (.ceylon.language.String)((.ceylon.language.Sequence)$ceylontmp$item$48).getFromFirst(0);
                                        y1 = (.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$ceylontmp$item$48).getFromFirst(1);
                                        sk1 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$48).getFromFirst(2)).getKey();
                                        sv1 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$48).getFromFirst(2)).getItem();
                                        return true;
                                    }
                                }
                                private .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> $iterator$1;
                                
                                private final boolean $iterator$1() {
                                    if ($pattern$tuple$49$exhausted$) return false;
                                    if ($iterator$1 != null) return true;
                                    if (!this.$pattern$tuple$49()) return false;
                                    $iterator$1 = ((.ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object>)(.ceylon.language.Iterable)iter).iterator();
                                    return true;
                                }
                                private .ceylon.language.String x2;
                                private .ceylon.language.Sequential<? extends .ceylon.language.Float> y2;
                                private .ceylon.language.String sk2;
                                private .ceylon.language.String sv2;
                                private boolean $pattern$tuple$51$exhausted$;
                                
                                private final boolean $pattern$tuple$51() {
                                    while (this.$iterator$1()) {
                                        final .java.lang.Object $ceylontmp$item$50 = $iterator$1.next();
                                        $pattern$tuple$51$exhausted$ = $ceylontmp$item$50 == .ceylon.language.finished_.get_();
                                        if ($pattern$tuple$51$exhausted$) {
                                            $iterator$1 = null;
                                        } else {
                                            x2 = (.ceylon.language.String)((.ceylon.language.Sequence)$ceylontmp$item$50).getFromFirst(0);
                                            y2 = (.ceylon.language.Sequential<? extends .ceylon.language.Float>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$ceylontmp$item$50).getFromFirst(1);
                                            sk2 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$50).getFromFirst(2)).getKey();
                                            sv2 = (.ceylon.language.String)((.ceylon.language.Entry)((.ceylon.language.Sequence)$ceylontmp$item$50).getFromFirst(2)).getItem();
                                            return true;
                                        }
                                    }
                                    if ($pattern$tuple$49$exhausted$) $pattern$tuple$51$exhausted$ = true;
                                    return false;
                                }
                                
                                public final .java.lang.Object next() {
                                    if (this.$pattern$tuple$51()) {
                                        final .ceylon.language.String x1 = this.x1;
                                        final .ceylon.language.Sequential<? extends .ceylon.language.Float> y1 = this.y1;
                                        final .ceylon.language.String sk1 = this.sk1;
                                        final .ceylon.language.String sv1 = this.sv1;
                                        final .ceylon.language.String x2 = this.x2;
                                        final .ceylon.language.Sequential<? extends .ceylon.language.Float> y2 = this.y2;
                                        final .ceylon.language.String sk2 = this.sk2;
                                        final .ceylon.language.String sv2 = this.sv2;
                                        return (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Float.$TypeDescriptor$), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), new .java.lang.Object[]{
                                                x1,
                                                y2,
                                                new .ceylon.language.Entry<.ceylon.language.String, .ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, sk1, sv2)});
                                    } else return .ceylon.language.finished_.get_();
                                }
                            };
                        }
                    };
                
                default: 
                    return null;
                
                }
            }
        };
    }
}
final class destructureIf_ {
    
    private destructureIf_() {
    }
    
    static void destructureIf(final .ceylon.language.Sequence maybePair, final .ceylon.language.Sequential<? extends .ceylon.language.String> names, final .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .java.lang.Object> maybeEntry) {
        .ceylon.language.Sequence $pattern$tuple$53$54;
        if (($pattern$tuple$53$54 = (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)maybePair) != null) {
            final long i$56 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$53$54).getFromFirst(1)).longValue();
            final double x$55 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$53$54).getFromFirst(0)).doubleValue();
            final double c = x$55;
            final long j = i$56;
        }
        .ceylon.language.Entry<? extends .ceylon.language.String, ? extends .java.lang.Object> $pattern$entry$58$59;
        if (($pattern$entry$58$59 = maybeEntry) != null) {
            final .java.lang.Object v$60 = ((.ceylon.language.Entry)$pattern$entry$58$59).getItem();
            final .java.lang.String k = ((.ceylon.language.String)((.ceylon.language.Entry)$pattern$entry$58$59).getKey()).toString();
            final .java.lang.String key = k;
            final .java.lang.Object item = v$60;
        }
        .ceylon.language.Sequential<? extends .ceylon.language.String> $pattern$tuple$62$63;
        if (($pattern$tuple$62$63 = names) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequential<? extends .ceylon.language.String> rest$65 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$pattern$tuple$62$63).skip(1).sequence();
            final .java.lang.String name$64 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$62$63).getFromFirst(0)).toString();
            final .java.lang.String n = name$64;
            final .ceylon.language.Sequential<? extends .ceylon.language.String> ns = rest$65;
        }
        .ceylon.language.Sequence $pattern$tuple$67$68;
        .ceylon.language.Sequential<? extends .ceylon.language.String> $pattern$tuple$71$72;
        if (($pattern$tuple$67$68 = (.ceylon.language.Sequence<? extends .java.lang.Object>)(.ceylon.language.Sequence)maybePair) != null) {
            final long i$70 = ((.ceylon.language.Integer)((.ceylon.language.Sequence)$pattern$tuple$67$68).getFromFirst(1)).longValue();
            final double x$69 = ((.ceylon.language.Float)((.ceylon.language.Sequence)$pattern$tuple$67$68).getFromFirst(0)).doubleValue();
            if (($pattern$tuple$71$72 = names) instanceof .ceylon.language.Sequence) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> rest$74 = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)((.ceylon.language.Sequence)$pattern$tuple$71$72).skip(1).sequence();
                final .java.lang.String name$73 = ((.ceylon.language.String)((.ceylon.language.Sequence)$pattern$tuple$71$72).getFromFirst(0)).toString();
                final double c = x$69;
                final long j = i$70;
                final .java.lang.String n = name$73;
                final .ceylon.language.Sequential<? extends .ceylon.language.String> ns = rest$74;
            }
        }
    }
}